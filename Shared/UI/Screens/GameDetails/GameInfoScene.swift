//
//  GameDetailsScene.swift
//  di-example
//
//  Created by Marvin Zwolsman on 22/12/2021.
//
//

import SwiftUI

struct GameInfoScene: View {
    @ObservedObject private(set) var viewModel: ViewModel

    let inspection = Inspection<Self>()

    var body: some View {
        content
        #if os(iOS)
                .navigationBarTitle("Game Info", displayMode: .inline)
                .listStyle(.grouped)
        #endif
                .onReceive(inspection.notice) {
                    inspection.visit(self, $0)
                }
    }

    @ViewBuilder
    private var content: some View {
        switch viewModel.game {
        case .notRequested: notRequestedView
        case .isLoading: loadingView
        case let .loaded(game): loadedView(game)
        case let .failed(error): failedView(error)
        }
    }
}

// MARK: - Loading Content

private extension GameInfoScene {
    var notRequestedView: some View {
        Text("").onAppear(perform: viewModel.loadGame)
    }

    var loadingView: some View {
        VStack {
            ProgressView()
            Button(action: {
                viewModel.game.cancelLoading()
            }, label: { Text("Cancel loading") })
        }
    }

    func failedView(_ error: Error) -> some View {
        Text(error.localizedDescription)
    }
}

// MARK: - Displaying Content

private extension GameInfoScene {
    func loadedView(_ game: Game) -> some View {
        List {
            basicInfo(game)
            secretInfo(game)
        }
    }

    private func basicInfo(_ game: Game) -> some View {
        Section(header: Text("Info")) {
            DetailRow(left: Text("Initial stake"), right: Text("\(viewModel.initialStake) points"))
                    .onTapGesture(perform: viewModel.toggleAbbreviatePoints)
            DetailRow(left: Text("Stake"), right: Text("\(viewModel.stake) points"))
                    .onTapGesture(perform: viewModel.toggleAbbreviatePoints)
            DetailRow(left: Text("Multiplier"), right: Text(game.multiplier.formatted()))
            DetailRow(left: Text("Bombs"), right: Text("\(game.bombs)"))
            DetailRow(left: Text("Color"), right: ColorCell(color: game.color))
        }
    }

    private func secretInfo(_ game: Game) -> some View {
        Section(header: Text("Game secret"), footer: secretFooter()) {
            Text(viewModel.showPlain ? viewModel.plain : viewModel.secret)
                    .multilineTextAlignment(.center)
                    .font(.system(.body, design: .monospaced))
                    .frame(maxWidth: .infinity)
                    .onTapGesture {
                        viewModel.toggleSecret()
                    }
        }
    }

    func secretFooter() -> Text {
        // swiftlint:disable line_length
        Text("When a new game is started, three of the twenty-five tiles are chosen as mines. " +
                "The three tiles (represented as numbers from 1 to 25,) coupled with a random string generated by the server are hashed using SHA256. " +
                "The result of the hash function is shown to you before you make your first tile choice. Once the game is over you can reveal the secret by tapping on the result of the hash function.")
        // swiftlint:enable line_length
    }
}

struct GameDetailsScene_Previews: PreviewProvider {
    static var previews: some View {
        GameInfoScene(viewModel: .init(container: .preview, gameId: Game.mockedData[0].id))
    }
}
